# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15K3WtlE9Cs9vwpz5mj-c9jvbim8xJs6P
"""

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="dNGtI9ZIgoSH0TQytX0o")
project = rf.workspace("mytest-blult").project("fire-smoke-detection-eozii")
version = project.version(1)
dataset = version.download("yolov11")

import yaml

# Path to the data.yaml file (adjust if needed)
yaml_path = f"{dataset.location}/data.yaml"

with open(yaml_path, 'r') as file:
    data = yaml.safe_load(file)

print("Classes:", data['names'])
print("Number of classes:", data['nc'])

!pip install ultralytics

# --- 1. Load Model ---
from ultralytics import YOLO
model = YOLO("yolo11m.pt")  # Your pretrained model

from ultralytics import YOLO
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import os

import torch
torch.cuda.empty_cache()

os.environ['PYTORCH_CUDA_ALLOC_CONF'] = 'expandable_segments:True'  # Add before torch import

# Train with all data (comment out if you want separate val)
results = model.train(
    data=f"{dataset.location}/data.yaml",
    epochs=60,
    imgsz=640,
    batch=8,
    plots=True,
    save=True,
    save_json=True,

    #rect=True,  # Uncomment for rectangular training
    device='0'  # Uncomment for GPU
)

# --- 3. Evaluate on Test Set ---
eval_results = model.val(
    data=f"{dataset.location}/data.yaml",
    split="test",
    plots=True,
    save_json=True
)

# --- 4. Enhanced Confusion Matrix ---
def plot_confusion_matrix():
    try:
        cm_path = f"{eval_results.save_dir}/confusion_matrix_normalized.txt"
        cm = np.loadtxt(cm_path)
        plt.figure(figsize=(10, 8))
        sns.heatmap(
            cm,
            annot=True,
            fmt=".2f",
            cmap="Blues",
            xticklabels=model.names.values(),
            yticklabels=model.names.values()
        )
        plt.title("Confusion Matrix (Normalized)", fontsize=14)
        plt.xlabel("Predicted", fontsize=12)
        plt.ylabel("Actual", fontsize=12)
        plt.savefig("confusion_matrix.png", dpi=300, bbox_inches="tight")
        plt.close()
        print("‚úÖ Saved professional confusion matrix")
    except Exception as e:
        print(f"‚ùå Confusion matrix error: {str(e)}")

plot_confusion_matrix()

# --- 5. Print Key Metrics ---
print("\n\033[1müî• Final Evaluation Results üî•\033[0m")
print(f"‚Ä¢ mAP@0.5: {eval_results.box.map:.3f}")
print(f"‚Ä¢ mAP@0.5-0.95: {eval_results.box.map50:.3f}")
print(f"‚Ä¢ Precision: {eval_results.box.mp:.3f}")
print(f"‚Ä¢ Recall: {eval_results.box.mr:.3f}")

# --- 6. Save Full Report ---
with open("performance_report.txt", "w") as f:
    f.write(f"Base Model: yolov12m.pt\n")
    f.write(f"Classes: {model.names}\n\n")
    f.write(f"mAP@0.5: {eval_results.box.map:.3f}\n")
    f.write(f"Precision: {eval_results.box.mp:.3f}\n")
    f.write(f"Recall: {eval_results.box.mr:.3f}\n")
    f.write(f"Training Time: {results.timestamp}\n")

print("\n\033[1m‚úÖ All tasks completed! Model saved in runs/detect/train/\033[0m")

# --- 6. Save Full Report ---
with open("performance_report.txt", "w") as f:
    f.write(f"Base Model: yolov12m.pt\n")
    f.write(f"Classes: {model.names}\n\n")
    f.write(f"mAP@0.5: {eval_results.box.map:.3f}\n")
    f.write(f"Precision: {eval_results.box.mp:.3f}\n")
    f.write(f"Recall: {eval_results.box.mr:.3f}\n")
    f.write(f"Training Time: {results.timestamp}\n")

print("\n\033[1m‚úÖ All tasks completed! Model saved in runs/detect/train/\033[0m")